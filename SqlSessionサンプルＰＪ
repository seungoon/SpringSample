https://github.com/a6205206z/biyu


<script type="text/javascript">
    $("#account").submit(function() {
        var account = $(this).serializeObject();
        jQuery.ajax({
            'type': 'POST',
            'url': 'ajax_info.html',
            'beforeSend': function(xhr) {
                xhr.setRequestHeader("X-AjaxRequest", "1");
            },
            'contentType': 'application/json',
            'data': JSON.stringify(account),
            'dataType': 'json',
            'success': function(obj) {
                $("#show").val(obj.name);
            },
            'complete': function(xhr) {
                if (xhr.status == 601) {
                    //alert("xhr status: " + xhr.status);
                    window.location.reload();
                }
            }
        });
        return false;
    });
</script>


public class AjaxAwareAuthenticationEntryPoint extends LoginUrlAuthenticationEntryPoint {

    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
        if(request.getHeader("X-AjaxRequest") != null && request.getHeader("X-AjaxRequest").equals("1")){
            ((HttpServletResponse)response).sendError(601, "");
            System.out.println("Ajax parameter: " + request.getHeader("X-AjaxRequest"));
        }else{
            super.commence(request, response, authException);
            System.out.println("Ajax parameter: " + request.getHeader("X-AjaxRequest"));
        }
    }
}


public class SessionExpiredDetectingLoginUrlAuthenticationEntryPoint
        extends LoginUrlAuthenticationEntryPoint {

    private static final String AJAX_REQUEST_IDENTIFIER = "XMLHttpRequest";

    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)
            throws IOException, ServletException {

        if (AJAX_REQUEST_IDENTIFIER.equals(request.getHeader("X-Requested-With"))) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        super.commence(request, response, authException);
    }
    
    @Override
    protected String buildRedirectUrlToLoginPage(
            HttpServletRequest request, HttpServletResponse response,
            AuthenticationException authException) {

        String redirectUrl = super.buildRedirectUrlToLoginPage(request, response, authException);
        if (isRequestedSessionInvalidate(request)) {
            redirectUrl += redirectUrl.contains("?") ? "&" : "?";
            redirectUrl += "timeout=true";
        }
        return redirectUrl;
    }

    private boolean isRequestedSessionInvalidate(HttpServletRequest request) {
        return request.getRequestedSessionId() != null && !request.isRequestedSessionIdValid();
    }
}
