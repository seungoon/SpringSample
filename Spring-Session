※参考サイト：　https://qiita.com/opengl-8080/items/032ed0fa27a239bdc1cc
              https://qiita.com/kazuki43zoo/items/8123906809632503cc21
              http://www.pwv.co.jp/~take/TakeWiki/index.php?Spring-MVC%E3%81%A7spring%E3%81%AEsession%20scope%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%83%86%E3%82%B9%E3%83%88%E3%81%97%E3%81%9F%E3%81%84

■同時セッション数を制限する
セッションが新たに作成されたことを Spring Security が検知できるようにするため、 HttpSessionEventPublisher をリスナーとして登録する必要がある
web.xml を使っているなら、普通に <listener> で宣言する。
WebApplicationInitializer を利用しているなら、 enableHttpSessionEventPublisher() メソッドをオーバーライドして true を返すようにすると、 
HttpSessionEventPublisher をリスナーをとして登録してくれる。

@Override
    protected boolean enableHttpSessionEventPublisher() {
        return true;
    }

⇒エラー画面を指定する
@EnableWebSecurity
public class MySpringSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                ...
                .and()
                .sessionManagement().maximumSessions(1).expiredUrl("/login");
    }

    ...
}

=>エラー時の処理を実装で指定する
public class MySessionInformationExpiredStrategy implements SessionInformationExpiredStrategy {

    @Override
    public void onExpiredSessionDetected(SessionInformationExpiredEvent event) throws IOException, ServletException {
        DefaultRedirectStrategy redirectStrategy = new DefaultRedirectStrategy();
        redirectStrategy.sendRedirect(event.getRequest(), event.getResponse(), "/login");
    }
}

■上限を超えてログインできないようにする
max-sessions (maximumSessions) を指定しただけだと、上限を超えてログインした場合は古いセッションから破棄されていく。

逆に、上限を超えてログインしようとしたら新しくセッションを作ろうとしたほうをエラーにすることもできる。
ただし、この設定を有効にした場合、古いセッションが切れるか明示的にログアウトするまで新しいログインができなくなる可能性があるので注意。

@EnableWebSecurity
public class MySpringSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                ...
                .and()
                .sessionManagement()
                    .maximumSessions(1)
                    .maxSessionsPreventsLogin(true);
    }

    ...
}

・maxSessionsPreventsLogin(boolean) メソッドで true を渡す。

=>エラー時の遷移先を指定する
<head>
        <meta charset="UTF-8" />
        <title>Max Session</title>
    </head>
    <body>
        <h1>セッション数が上限に達しています</h1>

        <%@page import="org.springframework.security.core.AuthenticationException" %>
        <%@page import="org.springframework.security.web.WebAttributes" %>
        <%
            AuthenticationException e = (AuthenticationException)session.getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
            pageContext.setAttribute("errorMessage", e.getMessage());
        %>

        <h2 style="color: red;">${errorMessage}</h2>
    </body>
    
   @EnableWebSecurity
    public class MySpringSecurityConfig extends WebSecurityConfigurerAdapter {

        @Override
        public void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests()
                    .antMatchers("/login").permitAll()
                    .antMatchers("/max-session-error.jsp").permitAll()
                    .anyRequest().authenticated()
                    .and()
                    .formLogin()
                        .failureUrl("/max-session-error.jsp")
                    .and()
                    .sessionManagement()
                        .maximumSessions(1)
                        .maxSessionsPreventsLogin(true);
        }

        ...
    }

■セッションID の変更を制御する
<session-management> の session-fixation-protection 属性を指定
ここでは none を指定して、セッションID の変更を無効にしている

@EnableWebSecurity
public class MySpringSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                ...
                .and()
                .sessionManagement()
                    .sessionFixation().none();
    }

    ...
}

■認証済みのユーザ情報を引き継ぐ
コントローラに定義したメソッドの引数に@AuthenticationPrincipalアノテーションを付与します。 
こうすると、その引数に認証したユーザ情報が自動的に渡されるようになります。

■Autoログイン
public boolean autoLogin( String username, String password, HttpServletRequest request) {
       
        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, password);
 
        Authentication authentication = authManager.authenticate(token);
 
        SecurityContextHolder.getContext().setAuthentication(authentication );
 
        //this step is important, otherwise the new login is not in session which is required by Spring Security
        request.getSession().setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY, SecurityContextHolder.getContext());
        
        return true;
    }
   
  ※参考サイト：　https://blog.tagbangers.co.jp/2014/08/31/spring-security-dynamic-security-context-repository

■SessionTimeout対応  　　　　　　　　
　※参考サイト： http://progmemo.wp.xdomain.jp/archives/847
 　　　　　　　　https://ishiis.net/2016/08/27/spring-security-custom-authentication/
               https://qiita.com/T0000N/items/7d3450623da5bc27e116
  
    /**
   * セッションタイムアウト時の挙動を定義する。
   */
  public class SessionExpireInterceptor implements HandlerInterceptor {
      @Override
      public boolean preHandle(HttpServletRequest request, HttpServletResponse response,
              Object handler) throws Exception {
          if (isTarget(request)) {
              // セッションタイムアウトのチェック
              if (isSessionTimeout(request)) { // セッションタイムアウトの場合
                  // Ajax処理の場合は「セッションタイムアウトが発生しました。ログインしなおしてください。」というメッセージを返却する。
                  if (isAjaxRequest(request)) {
                      String message =
                              "{\"success\":false,\"messages\":[\"セッションタイムアウトが発生しました。ログインしなおしてください。\"]}";
                      response.setContentType("text/html;charset=UTF-8");
                      // ステータスは200となるが、success = falseとする。
                      response.setStatus(HttpServletResponse.SC_OK);
                      response.getWriter().write(message);
                      return false;
                  } else {
                      String requestUri = request.getRequestURI();
                      // ログイン・ログアウト・タイムアウトページのタイムアウトは行わない。
                      if (!((request.getContextPath() + AppConst.URL_LOGIN_PAGE + "/timeout")
                              .equals(requestUri) //
                              || (request.getContextPath() + AppConst.URL_LOGIN_PAGE)
                                      .equals(requestUri) //
                      || (request.getContextPath() + AppConst.URL_LOGOUT_COMPLETED_PAGE)
                              .equals(requestUri))) {
                          // 通常画面の場合は、ログイン画面を表示しセッションタイムアウトメッセージを伝える。
                          response.sendRedirect(request.getContextPath() + AppConst.URL_LOGIN_PAGE
                                  + "/timeout");
                      }
                  }
              }
          }
          return true;
      }
      /**
       * 対象のリクエストか判定
       * css, js, favicon等のリソースアクセスについては出力対象外
       *
       * @param request リクエスト
       * @return true : ロギング対象 / false : ロギング対象ではない
       */
      private boolean isTarget(ServletRequest request) {
          String uri = ((HttpServletRequest) request).getRequestURI();
          return (uri.indexOf("/static") < 0 && uri.indexOf("/favicon.ico") < 0);
      }
      /**
       * Ajaxリクエスト判定
       *
       * @param request リクエスト
       * @return true : Ajaxリクエスト / false : そうではない
       */
      private boolean isAjaxRequest(ServletRequest request) {
          return StringUtils.equals("XMLHttpRequest",
                  ((HttpServletRequest) request).getHeader("X-Requested-With"));
      }
      /**
       * セッションタイムアウト判定
       *
       * @param request
       * @return
       */
      private boolean isSessionTimeout(HttpServletRequest request) {
          HttpSession falsecurrentSession = request.getSession(false);
          if (falsecurrentSession == null) {
              return true;
          }
          String requestSession = request.getRequestedSessionId();
          boolean isValid = request.isRequestedSessionIdValid();
          return falsecurrentSession == null || requestSession == null || !isValid
                  || !requestSession.equals(falsecurrentSession.getId());
      }
      @Override
      public void postHandle(HttpServletRequest request, HttpServletResponse response,
              Object handler, ModelAndView modelAndView) throws Exception {}
      @Override
      public void afterCompletion(HttpServletRequest request, HttpServletResponse response,
              Object handler, Exception ex) throws Exception {}
  }
  
  
  
