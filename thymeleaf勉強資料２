

1.勉強サイト
http://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf_ja.html

th:each を使用する際に、繰り返し処理中のステータスを知るための便利なメカニズムがThymeleafにはあります:「ステータス変数」です。

ステータス変数は th:each 属性の中で定義され、次の内容を保持しています:

index プロパティ: 0始まりの現在の「繰り返しインデックス」
count プロパティ: 1始まりの現在の「繰り返しインデックス」
size プロパティ: 被繰り返し変数の全要素数
current プロパティ: 繰り返し中の「繰り返し変数」
even/odd 真偽値プロパティ: 現在の繰り返し処理が偶数か奇数か
first 真偽値プロパティ: 現在の繰り返し処理が最初かどうか
last 真偽値プロパティ: 現在の繰り返し処理が最後かどうか

基本オブジェクト以外にも、式の中の共通のタスクを手助けするためのユーティリティオブジェクトがあります。

#dates: java.util.Date オブジェクト用のユーティリティメソッド: フォーマット、コンポーネントの抽出など。
#calendars: #dates に似ていますが java.util.Calendar オブジェクト用です。
#numbers: 数値オブジェクト用のユーティリティメソッド。
#strings: String オブジェクト用のユーティリティメソッド: contains, startsWith, prepending/appending, など。
#objects: オブジェクト一般のユーティリティメソッド。
#bools: 真偽値評価用のユーティリティメソッド。
#arrays: 配列用のユーティリティメソッド。
#lists: リスト用のユーティリティメソッド。
#sets: セット用のユーティリティメソッド。
#maps: マップ用のユーティリティメソッド。
#aggregates: 配列やコレクション上での集約処理用ユーティリティメソッド。
#messages: #{…} と同様に、変数式内での外部化メッセージを取り扱うためのユーティリティメソッド。
#ids: (例えば、イテレーション結果などの)繰り返し処理内でid属性を取り扱うためのユーティリティメソッド。
