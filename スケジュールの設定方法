
※実行時間定義
# 秒/分/時/日/月/曜日
cron:
  cron1: 0 * * * * *
  cron2: 1,31 * * * * *
  
下記のようにすると、東京のタイムゾーンで、8時と9時と10時に実行されます。
(8時から10時の間で、0秒、0分のタイミングで実行といった指定になっている)

@Scheduled(cron = "0 0 8-10 * * *", zone = "Asia/Tokyo")
public void doSomething() {
}

@Scheduled(cron="*/10 * * * * MON-FRI")
public void cron() {
    System.out.println("平日に10秒ごと実行");
}

※複数のスケジュール設定
@Bean
public ThreadPoolTaskScheduler  taskScheduler(){
    ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();
    taskScheduler.setPoolSize(2); // プールサイズを変更する
    return  taskScheduler;
}
といった感じで ThreadPoolTaskScheduler を @Bean 登録してやり、その際に setPoolSize でプールサイズを設定してやれば良い。



※サンプルソース：

package com.schedule;
 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
 
@Component
public class Run {
 
  @Autowired
  CronSetting cron;
  private int i1 = 0;
  private int i2 = 0;
  private static final SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
 
  @Scheduled(cron="${cron.cron1}")
  public void execute1() {
    System.out.println("cron1 実行回数: " + ++i1 + ", 実行時間: " + sdf.format(new Date()));
  }
 
  @Scheduled(cron="${cron.cron2}")
  public void execute2() {
    System.out.println("cron2 実行回数: " + ++i2 + ", 実行時間: " + sdf.format(new Date()));
  }
 
}
